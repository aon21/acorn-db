{"remainingRequest":"/Users/kellymears/code/packages/acorn/web/app/themes/sage/src/tiny-pixel/acorn-models/node_modules/docz-core/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/kellymears/code/packages/acorn/web/app/themes/sage/src/tiny-pixel/acorn-models/node_modules/@mdx-js/loader/index.js??ref--6-2!/Users/kellymears/code/packages/acorn/web/app/themes/sage/src/tiny-pixel/acorn-models/node_modules/source-map-loader/index.js!/Users/kellymears/code/packages/acorn/web/app/themes/sage/src/tiny-pixel/acorn-models/docs/console/commands/migrate/makecommand.md","dependencies":[{"path":"/Users/kellymears/code/packages/acorn/web/app/themes/sage/src/tiny-pixel/acorn-models/docs/console/commands/migrate/makecommand.md","mtime":1564884961771},{"path":"/Users/kellymears/code/packages/acorn/web/app/themes/sage/src/tiny-pixel/acorn-models/node_modules/cache-loader/dist/cjs.js","mtime":1561229345214},{"path":"/Users/kellymears/code/packages/acorn/web/app/themes/sage/src/tiny-pixel/acorn-models/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":1559585071110},{"path":"/Users/kellymears/code/packages/acorn/web/app/themes/sage/src/tiny-pixel/acorn-models/node_modules/@mdx-js/loader/index.js","mtime":1564833488540},{"path":"/Users/kellymears/code/packages/acorn/web/app/themes/sage/src/tiny-pixel/acorn-models/node_modules/source-map-loader/index.js","mtime":1561229345898}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/kellymears/code/packages/acorn/web/app/themes/sage/src/tiny-pixel/acorn-models/docs/console/commands/migrate/makecommand.md"],"names":["React","mdx","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"tinypixelacorndatabaseconsolecommandsmigratemakecommand\"\n    }}>{`TinyPixel\\\\Acorn\\\\Database\\\\Console\\\\Commands\\\\Migrate\\\\MakeCommand`}</h1>\n    <ul>\n      <li parentName=\"ul\">{`Class name: MakeCommand`}</li>\n      <li parentName=\"ul\">{`Namespace: TinyPixel\\\\Acorn\\\\Database\\\\Console\\\\Commands\\\\Migrate`}</li>\n      <li parentName=\"ul\">{`Parent class: TinyPixel\\\\Acorn\\\\Database\\\\Console\\\\Commands\\\\Migrate\\\\BaseCommand`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <h3 {...{\n      \"id\": \"name\"\n    }}>{`$name`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`protected mixed $name = ' '\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Visibility: `}<strong parentName=\"li\">{`protected`}</strong></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"signature\"\n    }}>{`$signature`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`protected string $signature = 'migrate:make {name : The name of your migration}\n                        {table : The table to migrate.}\n                        {--create : Creates table}'\n`}</code></pre>\n    <p>{`The console command signature.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Visibility: `}<strong parentName=\"li\">{`protected`}</strong></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"description\"\n    }}>{`$description`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`protected string $description = 'Create a new migration file'\n`}</code></pre>\n    <p>{`The description of the command.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Visibility: `}<strong parentName=\"li\">{`protected`}</strong></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"creator\"\n    }}>{`$creator`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`protected \\\\Illuminate\\\\Database\\\\Migrations\\\\MigrationCreator $creator\n`}</code></pre>\n    <p>{`The migration creator instance.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Visibility: `}<strong parentName=\"li\">{`protected`}</strong></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"methods\"\n    }}>{`Methods`}</h2>\n    <h3 {...{\n      \"id\": \"__construct\"\n    }}>{`__construct`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`mixed TinyPixel\\\\Acorn\\\\Database\\\\Console\\\\Commands\\\\Migrate\\\\MakeCommand::__construct(\\\\Illuminate\\\\Database\\\\Migrations\\\\MigrationCreator $creator)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Visibility: `}<strong parentName=\"li\">{`public`}</strong></li>\n    </ul>\n    <h4 {...{\n      \"id\": \"arguments\"\n    }}>{`Arguments`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`$creator `}<strong parentName=\"li\">{`Illuminate\\\\Database\\\\Migrations\\\\MigrationCreator`}</strong></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"handle\"\n    }}>{`handle`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`void TinyPixel\\\\Acorn\\\\Database\\\\Console\\\\Commands\\\\Migrate\\\\MakeCommand::handle()\n`}</code></pre>\n    <p>{`Execute the console command.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Visibility: `}<strong parentName=\"li\">{`public`}</strong></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"writemigration\"\n    }}>{`writeMigration`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`string TinyPixel\\\\Acorn\\\\Database\\\\Console\\\\Commands\\\\Migrate\\\\MakeCommand::writeMigration(string $name, string $table, boolean $create)\n`}</code></pre>\n    <p>{`Write the migration file to disk.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Visibility: `}<strong parentName=\"li\">{`protected`}</strong></li>\n    </ul>\n    <h4 {...{\n      \"id\": \"arguments-1\"\n    }}>{`Arguments`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`$name `}<strong parentName=\"li\">{`string`}</strong></li>\n      <li parentName=\"ul\">{`$table `}<strong parentName=\"li\">{`string`}</strong></li>\n      <li parentName=\"ul\">{`$create `}<strong parentName=\"li\">{`boolean`}</strong></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"getmigrationpath\"\n    }}>{`getMigrationPath`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`string TinyPixel\\\\Acorn\\\\Database\\\\Console\\\\Commands\\\\Migrate\\\\BaseCommand::getMigrationPath()\n`}</code></pre>\n    <p>{`Get the path to the migration directory.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Visibility: `}<strong parentName=\"li\">{`protected`}</strong></li>\n      <li parentName=\"ul\">{`This method is defined by TinyPixel\\\\Acorn\\\\Database\\\\Console\\\\Commands\\\\Migrate\\\\BaseCommand`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"getmigrationpaths\"\n    }}>{`getMigrationPaths`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`array TinyPixel\\\\Acorn\\\\Database\\\\Console\\\\Commands\\\\Migrate\\\\BaseCommand::getMigrationPaths()\n`}</code></pre>\n    <p>{`Get all of the migration paths.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Visibility: `}<strong parentName=\"li\">{`protected`}</strong></li>\n      <li parentName=\"ul\">{`This method is defined by TinyPixel\\\\Acorn\\\\Database\\\\Console\\\\Commands\\\\Migrate\\\\BaseCommand`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"usingrealpath\"\n    }}>{`usingRealPath`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`boolean TinyPixel\\\\Acorn\\\\Database\\\\Console\\\\Commands\\\\Migrate\\\\BaseCommand::usingRealPath()\n`}</code></pre>\n    <p>{`Determine if the given path(s) are pre-resolved \"real\" paths.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Visibility: `}<strong parentName=\"li\">{`protected`}</strong></li>\n      <li parentName=\"ul\">{`This method is defined by TinyPixel\\\\Acorn\\\\Database\\\\Console\\\\Commands\\\\Migrate\\\\BaseCommand`}</li>\n    </ul>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "]}]}